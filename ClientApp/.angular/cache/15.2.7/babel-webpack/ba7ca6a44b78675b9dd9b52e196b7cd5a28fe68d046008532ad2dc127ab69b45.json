{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { HostListener } from \"@angular/core\";\nconst maxAllowedLength = 13;\nexport class NumericDirective {\n  checkDecimal(value) {\n    const regExpString = \"^((\\\\d+(\\\\.\\\\d{0,2})?)|((\\\\d*(\\\\.\\\\d{1,2}))))$\";\n    return String(value).match(new RegExp(regExpString));\n  }\n  run(oldValue) {\n    setTimeout(() => {\n      const currentValue = this.el.nativeElement.value;\n      if (currentValue !== \"\" && !this.checkDecimal(currentValue) || currentValue.length > maxAllowedLength) {\n        this.el.nativeElement.value = oldValue;\n      }\n    });\n  }\n  constructor(el) {\n    this.el = el;\n  }\n  onKeyDown(event) {\n    this.run(this.el.nativeElement.value);\n  }\n  onPaste(event) {\n    this.run(this.el.nativeElement.value);\n  }\n}\n__decorate([HostListener(\"keydown\", [\"$event\"])], NumericDirective.prototype, \"onKeyDown\", null);\n__decorate([HostListener(\"paste\", [\"$event\"])], NumericDirective.prototype, \"onPaste\", null);","map":{"version":3,"mappings":";AAAA,SAAgCA,YAAY,QAAe,eAAe;AAMlE,MAAMC,gBAAgB,GAAG,EAAE;AACnC,OAAM,MAAOC,gBAAgB;EACnBC,YAAY,CAACC,KAAa;IAChC,MAAMC,YAAY,GAAG,gDAAgD;IAErE,OAAOC,MAAM,CAACF,KAAK,CAAC,CAACG,KAAK,CAAC,IAAIC,MAAM,CAACH,YAAY,CAAC,CAAC;EACtD;EAEQI,GAAG,CAACC,QAAa;IACvBC,UAAU,CAAC,MAAK;MACd,MAAMC,YAAY,GAAW,IAAI,CAACC,EAAE,CAACC,aAAa,CAACV,KAAK;MACxD,IAAIQ,YAAY,KAAK,EAAE,IAAI,CAAC,IAAI,CAACT,YAAY,CAACS,YAAY,CAAC,IAAIA,YAAY,CAACG,MAAM,GAAGd,gBAAgB,EAAE;QACrG,IAAI,CAACY,EAAE,CAACC,aAAa,CAACV,KAAK,GAAGM,QAAQ;;IAE1C,CAAC,CAAC;EACJ;EAEAM,YAAoBH,EAAc;IAAd,OAAE,GAAFA,EAAE;EAAgB;EAGtCI,SAAS,CAACC,KAAoB;IAC5B,IAAI,CAACT,GAAG,CAAC,IAAI,CAACI,EAAE,CAACC,aAAa,CAACV,KAAK,CAAC;EACvC;EAGAe,OAAO,CAACD,KAAqB;IAC3B,IAAI,CAACT,GAAG,CAAC,IAAI,CAACI,EAAE,CAACC,aAAa,CAACV,KAAK,CAAC;EACvC;;AAPAgB,YADCpB,YAAY,CAAC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC,iDAGnC;AAGDoB,YADCpB,YAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,CAAC,+CAGjC","names":["HostListener","maxAllowedLength","NumericDirective","checkDecimal","value","regExpString","String","match","RegExp","run","oldValue","setTimeout","currentValue","el","nativeElement","length","constructor","onKeyDown","event","onPaste","__decorate"],"sourceRoot":"","sources":["C:\\VSTS\\B3\\B3\\ClientApp\\src\\app\\numeric.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener, Input } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"[numeric]\"\r\n})\r\n\r\nprivate const maxAllowedLength = 13;\r\nexport class NumericDirective {\r\n  private checkDecimal(value: string) {\r\n    const regExpString = \"^((\\\\d+(\\\\.\\\\d{0,2})?)|((\\\\d*(\\\\.\\\\d{1,2}))))$\";\r\n\r\n    return String(value).match(new RegExp(regExpString));\r\n  }\r\n\r\n  private run(oldValue: any) {\r\n    setTimeout(() => {\r\n      const currentValue: string = this.el.nativeElement.value;\r\n      if (currentValue !== \"\" && !this.checkDecimal(currentValue) || currentValue.length > maxAllowedLength) {\r\n        this.el.nativeElement.value = oldValue;\r\n      }\r\n    });\r\n  }\r\n\r\n  constructor(private el: ElementRef) { }\r\n\r\n  @HostListener(\"keydown\", [\"$event\"])\r\n  onKeyDown(event: KeyboardEvent) {\r\n    this.run(this.el.nativeElement.value);\r\n  }\r\n\r\n  @HostListener(\"paste\", [\"$event\"])\r\n  onPaste(event: ClipboardEvent) {\r\n    this.run(this.el.nativeElement.value);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}