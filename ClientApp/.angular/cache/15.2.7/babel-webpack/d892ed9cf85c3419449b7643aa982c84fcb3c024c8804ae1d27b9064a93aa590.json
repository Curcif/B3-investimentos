{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class NumericDirective {\n  check(value) {\n    const regExpString = \"^((\\\\d+(\\\\.\\\\d{0,\" + this.decimals + \"})?)|((\\\\d*(\\\\.\\\\d{1,\" + this.decimals + \"}))))$\";\n    return String(value).match(new RegExp(regExpString));\n  }\n  run(oldValue) {\n    setTimeout(() => {\n      const currentValue = this.el.nativeElement.value;\n      if (currentValue !== \"\" && !this.check(currentValue)) {\n        this.el.nativeElement.value = oldValue;\n      }\n    });\n  }\n  constructor(el) {\n    this.el = el;\n    this.decimals = 2;\n  }\n  onKeyDown(event) {\n    this.run(this.el.nativeElement.value);\n  }\n  onPaste(event) {\n    this.run(this.el.nativeElement.value);\n  }\n}\nNumericDirective.ɵfac = function NumericDirective_Factory(t) {\n  return new (t || NumericDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nNumericDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: NumericDirective,\n  selectors: [[\"\", \"numeric\", \"\"]],\n  hostBindings: function NumericDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function NumericDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      })(\"paste\", function NumericDirective_paste_HostBindingHandler($event) {\n        return ctx.onPaste($event);\n      });\n    }\n  },\n  inputs: {\n    decimals: \"decimals\"\n  }\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,gBAAgB;EAGnBC,KAAK,CAACC,KAAa;IACzB,MAAMC,YAAY,GAChB,mBAAmB,GACnB,IAAI,CAACC,QAAQ,GACb,uBAAuB,GACvB,IAAI,CAACA,QAAQ,GACb,QAAQ;IAEV,OAAOC,MAAM,CAACH,KAAK,CAAC,CAACI,KAAK,CAAC,IAAIC,MAAM,CAACJ,YAAY,CAAC,CAAC;EACtD;EAEQK,GAAG,CAACC,QAAa;IACvBC,UAAU,CAAC,MAAK;MACd,MAAMC,YAAY,GAAW,IAAI,CAACC,EAAE,CAACC,aAAa,CAACX,KAAK;MACxD,IAAIS,YAAY,KAAK,EAAE,IAAI,CAAC,IAAI,CAACV,KAAK,CAACU,YAAY,CAAC,EAAE;QACpD,IAAI,CAACC,EAAE,CAACC,aAAa,CAACX,KAAK,GAAGO,QAAQ;;IAE1C,CAAC,CAAC;EACJ;EAEAK,YAAoBF,EAAc;IAAd,OAAE,GAAFA,EAAE;IAtBH,aAAQ,GAAG,CAAC;EAsBO;EAGtCG,SAAS,CAACC,KAAoB;IAC5B,IAAI,CAACR,GAAG,CAAC,IAAI,CAACI,EAAE,CAACC,aAAa,CAACX,KAAK,CAAC;EACvC;EAGAe,OAAO,CAACD,KAAqB;IAC3B,IAAI,CAACR,GAAG,CAAC,IAAI,CAACI,EAAE,CAACC,aAAa,CAACX,KAAK,CAAC;EACvC;;AAjCWF,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;QAAhBA,gBAAgB;EAAAkB;EAAAC;IAAA;;eAAhBC,qBAAiB;MAAA;QAAA,OAAjBA,mBAAe;MAAA","names":["NumericDirective","check","value","regExpString","decimals","String","match","RegExp","run","oldValue","setTimeout","currentValue","el","nativeElement","constructor","onKeyDown","event","onPaste","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["C:\\VSTS\\B3\\B3\\ClientApp\\src\\app\\numeric.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener, Input } from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"[numeric]\"\r\n})\r\n\r\nexport class NumericDirective {\r\n  @Input(\"decimals\") decimals = 2;\r\n\r\n  private check(value: string) {\r\n    const regExpString =\r\n      \"^((\\\\d+(\\\\.\\\\d{0,\" +\r\n      this.decimals +\r\n      \"})?)|((\\\\d*(\\\\.\\\\d{1,\" +\r\n      this.decimals +\r\n      \"}))))$\";\r\n\r\n    return String(value).match(new RegExp(regExpString));\r\n  }\r\n\r\n  private run(oldValue: any) {\r\n    setTimeout(() => {\r\n      const currentValue: string = this.el.nativeElement.value;\r\n      if (currentValue !== \"\" && !this.check(currentValue)) {\r\n        this.el.nativeElement.value = oldValue;\r\n      }\r\n    });\r\n  }\r\n\r\n  constructor(private el: ElementRef) { }\r\n\r\n  @HostListener(\"keydown\", [\"$event\"])\r\n  onKeyDown(event: KeyboardEvent) {\r\n    this.run(this.el.nativeElement.value);\r\n  }\r\n\r\n  @HostListener(\"paste\", [\"$event\"])\r\n  onPaste(event: ClipboardEvent) {\r\n    this.run(this.el.nativeElement.value);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}